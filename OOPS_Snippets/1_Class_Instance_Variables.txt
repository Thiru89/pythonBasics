------------------------------------------------------------------------------------------------
Class- Class variables, Instance variables
------------------------------------------------------------------------------------------------

------------------------------------------------------------------------------------------------
Accessing defaut Constructor in python
------------------------------------------------------------------------------------------------
class Parent:
    def __init__(self):
        print("Parent Constructor")

    def display(self):
        print("Method")

object = Parent()


Answer
------
Parent Constructor

------------------------------------------------------------------------------------------------
Accessing a method inside a class
------------------------------------------------------------------------------------------------
class Parent:
    def __init__(self):
        print("Parent Constructor")

    def display(self):
        print("Method")


object = Parent()
object.display()


Answer
------
Parent Constructor
Method
------------------------------------------------------------------------------------------------
Accessing a Class Variables
------------------------------------------------------------------------------------------------

class Parent:

    variable1 = 0
    def __init__(self):
        print("Parent Constructor")

    def display(self):
        print("Method called")
        print("variable",Parent.variable1)


object = Parent()
object.display()
------------------------------------------------------------------------------------------------
Accessing Class Variable and instance variable  where instance is not assigned on the default constructor
------------------------------------------------------------------------------------------------

class Parent:

    variable1 = 0
    def __init__(self, name):
        print("Parent Constructor")

    def display(self):
        print("Method called")
        print("variable", Parent.variable1, self.name)


object = Parent("XYZ")
object.display()

Answer
------
AttributeError: 'Parent' object has no attribute 'name'
------------------------------------------------------------------------------------------------
Accessing Instance Variable
------------------------------------------------------------------------------------------------
class Parent:

    variable1 = 0
    def __init__(self, name):
        self.name = name
        print("Parent Constructor")

    def display(self):
        print("Method called")
        print("variable", Parent.variable1, self.name)


object = Parent("XYZ")
object.display()


Answer
------
Parent Constructor
Method called
variable 0 XYZ

------------------------------------------------------------------------------------------------
Modifying Class variable
------------------------------------------------------------------------------------------------
class Parent:

    variable1 = 0
    def __init__(self, name):
        self.name = name
        print("Parent Constructor")

    def display(self):
        print("Method called")
        print("variable", Parent.variable1, self.name)


object = Parent("XYZ")
object.display()
Parent.variable1 = "ABC"
print(object.display())


Answer
------
Parent Constructor
Method called
variable 0 XYZ
Method called
variable ABC XYZ
None

------------------------------------------------------------------------------------------------
Modifying Instance variable
------------------------------------------------------------------------------------------------
class Parent:

    variable1 = 0
    def __init__(self, name):
        self.name = name
        print("Parent Constructor")

    def display(self):
        print("Method called")
        print("variable", Parent.variable1, self.name)


object = Parent("XYZ")
object.display()
Parent.variable1 = "ABC"
object.name = "objectname"
print(object.display())


Answer
----------------
Parent Constructor
Method called
variable 0 XYZ
Method called
variable ABC objectname
None

Process finished with exit code 0


------------------------------------------------------------------------------------------------
Even if the variable name is modified. When referring to instance of the class it still uses the value which was instantiated.
------------------------------------------------------------------------------------------------

class Parent:

    variable1 = 0
    def __init__(self, name):
        self.name = name
        print("Parent Constructor")

    def display(self):
        print("Method called")
        print("variable", Parent.variable1, self.name)

object = Parent("XYZ")
Parent.name = 'ABC'
object.display()

ANSWER
-----------
Parent Constructor
Method called
variable 0 XYZ



---------------------------------------------------------------
Accessing Variables - 
1. Class variables can be accessed across the anymethod inside the class with the help of self.
2. Method variables are local to the method so it does not require a self reference.

---------------------------------------------------------------
class Parent:
    Classvariable = "classvariable"

    def __init__(self, name, age):
        self.name = name
        self.age = age
        self.displayfun()

    def displayfun(self):
        methodvariable="methodvariable"
        print(f"Name Parameter: {self.name} \nAge Parameter: {self.age}\nClassVariable: "
              f"{self.Classvariable}\nmethod variable: {methodvariable}")

obj = Parent("XYZ",10)

ANSWER
-------
Name Parameter: XYZ 
Age Parameter: 10
ClassVariable: classvariable
method variable: methodvariable


---------------------------------------------------------------
Accessing Variables - 
1. Method variable can update the class variable locally inside the method
---------------------------------------------------------------
class Parent:
    Classvariable = "classvariable"

    def __init__(self, name, age):
        self.name = name
        self.age = age
        self.displayfun()

    def displayfun(self):
        methodvariable="methodvariable"
        self.Classvariable ="override by method"
        print(f"Name Parameter: {self.name} \nAge Parameter: {self.age}\nClassVariable: "
              f"{self.Classvariable}\nmethod variable: {methodvariable}")

obj = Parent("XYZ",10)

ANSWER
-------
Name Parameter: XYZ 
Age Parameter: 10
ClassVariable: override by method
method variable: methodvariable
